#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int zap[40];
int otv[40];
int m[] = {12345, 64789, 23456, 54321, 9876, 34567, 63754, 13579, 24680, 11111, 22222, 33333, 44444, 55555, 61666, 11777};
int k2 = 0;
int k3 = 0;
int ig = 0;
int l3 = 0;
int c3[2];
int co = 0;
int tim = 0;
int ltime = 0;
int crc1 = 0;
int crc2 = 0;
int crc3 = 0;

void rw(int *zap){
	for (int i = 0; i < 5;i++){
		crc2 += (zap[i] & 0xFF);
	}
	crc1 = (zap[4] << 8) + zap[5];
	if (crc1 != crc2){
		ig = 0;
		memset(zap, 0, sizeof(zap));
		crc1 = 0;
		crc2 = 0;
		return;
	}
	crc1=0;
	crc2=0;
	for (int i = 0; i < 2;i++){
		otv[i] = zap[i];
	}
	int adr = (zap[2] << 8) + zap[3];
	if (adr > 15){
		ig = 0;
		memset(zap, 0, sizeof(zap));
		memset(otv, 0, sizeof(otv));
		return;
	}
	otv[2] = (m[adr] >> 8);
	otv[3] = (m[adr] & 0xFF);
	for (int i = 0; i < 4; i++){
		crc3 += (otv[i] & 0xFF);
	}
	otv[4] = (crc3 >> 8);
	otv[5] = (crc3 & 0xFF);
	for (int i = 0; i < 6; i++) {
		UDR0 = otv[i];
		while (!(UCSR0A & (1 << UDRE0))) {
			
		}
	}
	ig = 0;
	crc3 = 0;
	memset(zap, 0, sizeof(zap));
	memset(otv, 0, sizeof(otv));
}
void ww(int *zap){
	for (int i = 0; i < 7;i++){
		crc2 += (zap[i] & 0xFF);
	}
	crc1 = (zap[6] << 8) + zap[7];
	if (crc1 != crc2){
		ig = 0;
		k2 = 0;
		memset(zap, 0, sizeof(zap));
		crc1 = 0;
		crc2 = 0;
		return;
	}
	crc1=0;
	crc2=0;
	for (int i = 0; i < 8; i++){
		otv[i] = zap[i];
	}
	int adr = (zap[2] << 8) + zap[3];
	if (adr > 15){
		ig = 0;
		k2 = 0;
		memset(zap, 0, sizeof(zap));
		memset(otv, 0, sizeof(otv));
		return;
	}
	m[adr] = (zap[4] << 8) + zap[5];
	for (int i = 0; i < 8; i++) {
		UDR0 = otv[i];
		while (!(UCSR0A & (1 << UDRE0))) {
			
		}
	}
	ig = 0;
	k2 = 0;
	memset(zap, 0, sizeof(zap));
	memset(otv, 0, sizeof(otv));
}
void wws(int *zap){
	for (int i = 0; i< l3-2; i++){
		crc2 += (zap[i] & 0xFF);
	}
	crc1 = (zap[l3-2] << 8) + zap[l3-1];
	if (crc1 != crc2){
		ig = 0;
		k3 = 0;
		l3 = 0;
		memset(zap, 0, sizeof(zap));
		crc1 = 0;
		crc2 = 0;
		memset(c3, 0, sizeof(c3));
		co = 0;
		return;
	}
	crc1 = 0;
	crc2 = 0;
	for (int i = 0; i < 6; i++){
		otv[i] = zap[i];
	}
	for (int i = 0; i < 6; i++){
		crc3 += (otv[i] & 0xFF);
	}
	otv[6] = (crc3 >> 8);
	otv[7] = crc3 & 0xFF;
	int adr = (zap[2] << 8) + zap[3];
	if (adr + co > 15){
		ig = 0;
		k3 = 0;
		l3 = 0;
		crc3 = 0;
		memset(c3, 0, sizeof(c3));
		co = 0;
		memset(zap, 0, sizeof(zap));
		memset(otv, 0, sizeof(otv));
		return;
	}
	for (int i = 0; i < co; i++){
		m[adr + i] = (zap[7 + 2*i] << 8) + zap[7 + 2*i + 1];
	}
	for (int i = 0; i < 8; i++) {
		UDR0 = otv[i];
		while (!(UCSR0A & (1 << UDRE0))) {
			
		}
	}
	ig = 0;
	k3 = 0;
	l3 = 0;
	memset(c3, 0, sizeof(c3));
	co = 0;
	crc2 = 0;
	crc3 = 0;
	memset(zap, 0, sizeof(zap));
	memset(otv, 0, sizeof(otv));
}
ISR(TIMER1_COMPA_vect){
	if (sizeof(zap) > 1){
		if (tim == 0){
			tim += 1;
			ltime = sizeof(zap);
		}
		else if(ltime == sizeof(zap)){
			memset(zap, 0, sizeof(zap));
			ig = 0;
		}
	}
}

ISR (USART_RX_vect)
{
	int y = UDR0;
	if (ig < 6){
		zap[ig++] = y;
	}
	else if (ig==6){
		if (zap[1] == 1){
			rw(zap);
		}
		else if (zap[1] == 2){
			k2 = 1;
		}
		else if (zap[1] == 3){
			k3 = 1;
			c3[0] = zap[4];
			c3[1] = zap[5];
			co = (c3[0] << 8) + c3[1];
			l3 = ig + 3 + co*2;
		}
		
	}
	if (k2 == 1){
		if (ig < 8){
			zap[ig++] = y;
		}
		else if (ig == 8){
			ww(zap);
		}
	}
	if (k3 == 1){
		if (ig < l3){
			zap[ig++] = y;
		}
		else if (ig == l3){
			wws(zap);
		}
	}
}
int main(void)
{
	UBRR0 = 103;
	UCSR0B |= (0<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
	TCCR1B |= (1<<WGM12)|(1<<CS10)|(1<<CS12);
	OCR1A = 15625;
	TIMSK1 |= (1<<OCIE1A);
	sei();
	while (1)
	{
		
	}
}